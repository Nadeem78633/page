{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","useStyles1","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","console","log","classes","useTheme","count","page","rowsPerPage","onPageChange","className","IconButton","onClick","event","disabled","direction","Math","ceil","max","BasicTable","useState","result","setResult","React","setPage","setRowsPerPage","rows","emptyRows","min","length","forEach","el","id","firstName","lastName","email","avatar","temp","first_name","last_name","push","useEffect","fetch","then","response","json","data","catch","error","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","slice","map","row","Avatar","alt","src","name","style","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","label","value","SelectProps","inputProps","native","newPage","onRowsPerPageChange","parseInt","target","ActionsComponent","ReactDOM","render","document","querySelector"],"mappings":"+UAmBMA,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAIRC,EAAaH,aAAW,SAACI,GAAD,MAAY,CACxCC,KAAM,CACJC,WAAY,EACZC,WAAYH,EAAMI,QAAQ,UAI9B,SAASC,EAAuBC,GAC9BC,QAAQC,IAAIF,GACZ,IAAMG,EAAUV,IACVC,EAAQU,cACNC,EAA2CL,EAA3CK,MAAOC,EAAoCN,EAApCM,KAAMC,EAA8BP,EAA9BO,YAAaC,EAAiBR,EAAjBQ,aAkBlC,OACE,sBAAKC,UAAWN,EAAQR,KAAxB,UACE,cAACe,EAAA,EAAD,CACEC,QAnB6B,SAACC,GAClCJ,EAAaI,EAAO,IAmBhBC,SAAmB,IAATP,EACV,aAAW,aAHb,SAKuB,QAApBZ,EAAMoB,UAAsB,cAAC,IAAD,IAAmB,cAAC,IAAD,MAElD,cAACJ,EAAA,EAAD,CACEC,QAtBwB,SAACC,GAC7BJ,EAAaI,EAAON,EAAO,IAsBvBO,SAAmB,IAATP,EACV,aAAW,gBAHb,SAKuB,QAApBZ,EAAMoB,UACL,cAAC,IAAD,IAEA,cAAC,IAAD,MAGJ,cAACJ,EAAA,EAAD,CACEC,QA7BwB,SAACC,GAC7BJ,EAAaI,EAAON,EAAO,IA6BvBO,SAAUP,GAAQS,KAAKC,KAAKX,EAAQE,GAAe,EACnD,aAAW,YAHb,SAKuB,QAApBb,EAAMoB,UACL,cAAC,IAAD,IAEA,cAAC,IAAD,MAGJ,cAACJ,EAAA,EAAD,CACEC,QApC4B,SAACC,GACjCJ,EAAaI,EAAOG,KAAKE,IAAI,EAAGF,KAAKC,KAAKX,EAAQE,GAAe,KAoC7DM,SAAUP,GAAQS,KAAKC,KAAKX,EAAQE,GAAe,EACnD,aAAW,YAHb,SAKuB,QAApBb,EAAMoB,UAAsB,cAAC,IAAD,IAAoB,cAAC,IAAD,SAU1C,SAASI,IACtB,IAAMf,EAAUd,IAChB,EAA4B8B,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwBC,IAAMH,SAAS,GAAvC,mBAAOb,EAAP,KAAaiB,EAAb,KACA,EAAsCD,IAAMH,SAAS,GAArD,mBAAOZ,EAAP,KAAoBiB,EAApB,KACMC,EAAO,GAEPC,EACJnB,EAAcQ,KAAKY,IAAIpB,EAAakB,EAAKG,OAAStB,EAAOC,GAmC3D,OAxBAa,EAAOS,SAAQ,SAACC,GACd,IAxBgBC,EAAIC,EAAWC,EAAUC,EAAOC,EAwB1CC,GAxBUL,EAyBdD,EAAGC,GAzBeC,EA0BlBF,EAAGO,WA1B0BJ,EA2B7BH,EAAGQ,UA3BoCJ,EA4BvCJ,EAAGI,MA5B2CC,EA6B9CL,EAAGK,OA5BA,CAAEJ,KAAIC,YAAWC,WAAUC,QAAOC,WA8BvCV,EAAKc,KAAKH,MAEZnC,QAAQC,IAAIuB,GAEZe,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACLtB,EAAUsB,EAASE,SAEpBC,OAAM,SAACC,GAEN9C,QAAQC,IAAI6C,QAEf,IAGD,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAO1C,UAAWN,EAAQZ,MAAO,aAAW,eAA5C,UACE,cAAC6D,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,MAAM,SAAjB,gBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,wBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,uBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,mBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,SAAjB,yBAGJ,eAACC,EAAA,EAAD,YACIjD,EAAc,EACZkB,EAAKgC,MAAMnD,EAAOC,EAAaD,EAAOC,EAAcA,GACpDkB,GACFiC,KAAI,SAACC,GAAD,OACJ,eAACN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BI,EAAI5B,KAC/B,cAACuB,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BI,EAAI3B,YAC/B,cAACsB,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BI,EAAI1B,WAC/B,cAACqB,EAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BI,EAAIzB,QAC/B,cAACoB,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACE,cAACK,EAAA,EAAD,CAAQC,IAAI,aAAaC,IAAKH,EAAIxB,aANvBwB,EAAII,SAWpBrC,EAAY,GACX,cAAC2B,EAAA,EAAD,CAAUW,MAAO,CAAEC,OAAQ,GAAKvC,GAAhC,SACE,cAAC4B,EAAA,EAAD,CAAWY,QAAS,SAI1B,cAACC,EAAA,EAAD,UACE,cAACd,EAAA,EAAD,UACE,cAACe,EAAA,EAAD,CACEC,mBAAoB,CAAC,EAAG,GAAI,GAAI,CAAEC,MAAO,MAAOC,OAAQ,IACxDL,QAAS,EACT7D,MAAOoB,EAAKG,OACZrB,YAAaA,EACbD,KAAMA,EACNkE,YAAa,CACXC,WAAY,CAAE,aAAc,iBAC5BC,QAAQ,GAEVlE,aA/Ea,SAACI,EAAO+D,GAC/BpD,EAAQoD,IA+EEC,oBA5EoB,SAAChE,GAC/BY,EAAeqD,SAASjE,EAAMkE,OAAOP,MAAO,KAC5ChD,EAAQ,IA2EEwD,iBAAkBhF,aC1LhCiF,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,cAAc,Y","file":"static/js/main.370cc587.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Avatar from '@material-ui/core/Avatar';\nimport PropTypes from 'prop-types';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  console.log(props);\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label='first page'\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label='previous page'\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label='next page'\n      >\n        {theme.direction === 'rtl' ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label='last page'\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nfunction createData(id, firstName, lastName, email, avatar) {\n  return { id, firstName, lastName, email, avatar };\n}\n\nexport default function BasicTable() {\n  const classes = useStyles();\n  const [result, setResult] = useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const rows = [];\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  result.forEach((el) => {\n    const temp = createData(\n      el.id,\n      el.first_name,\n      el.last_name,\n      el.email,\n      el.avatar\n    );\n    rows.push(temp);\n  });\n  console.log(rows);\n\n  useEffect(() => {\n    fetch('https://reqres.in/api/users?page=2')\n      .then((response) => response.json())\n      .then((response) => {\n        setResult(response.data);\n      })\n      .catch((error) => {\n        // handle the error\n        console.log(error);\n      });\n  }, []);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label='simple table'>\n        <TableHead>\n          <TableRow>\n            <TableCell align='center'>Id</TableCell>\n            <TableCell align='center'>First Name</TableCell>\n            <TableCell align='center'>Last Name</TableCell>\n            <TableCell align='center'>Email</TableCell>\n            <TableCell align='center'>Avatar</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {(rowsPerPage > 0\n            ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            : rows\n          ).map((row) => (\n            <TableRow key={row.name}>\n              <TableCell align='center'>{row.id}</TableCell>\n              <TableCell align='center'>{row.firstName}</TableCell>\n              <TableCell align='center'>{row.lastName}</TableCell>\n              <TableCell align='center'>{row.email}</TableCell>\n              <TableCell align='center'>\n                <Avatar alt='Remy Sharp' src={row.avatar} />\n              </TableCell>\n            </TableRow>\n          ))}\n\n          {emptyRows > 0 && (\n            <TableRow style={{ height: 53 * emptyRows }}>\n              <TableCell colSpan={6} />\n            </TableRow>\n          )}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n              colSpan={3}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n              onPageChange={handleChangePage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App/>,document.querySelector('#root'));\r\n"],"sourceRoot":""}